swagger: "2.0"
info:
  version: "1.0.0"
  title: "Shops API"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3021"
basePath: "/api"
schemes:
  - "http"

paths:
  /shops: 
    get: 
      tags: 
      - "Shop"
      summary: "Get all shops" 
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful"
          schema: 
            $ref: "#/definitions/shops"
        400:
          description: "Unable to find shops"
          schema: 
            $ref: "#/definitions/shops"
    post: 
      tags: 
      - "Shop"
      summary: "Create shop"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Shop object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/shops"
      responses:
        200:
          description: "Successful"
          schema: 
            $ref: "#/definitions/shops"
        404:
          description: "Shop not found"
          schema:   
            $ref: "#/definitions/shops"
        400:
          description: "Unable to create shop"
          schema: 
            $ref: "#/definitions/shops"

  /shops/{shopId}:
      put: 
        tags: 
        - "Shop"
        summary: "Update shop"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
          - in: "path"
            name: shopId
            required: true
            description: "Shop id"
            type: "integer"
            format: "int64"
          - in: "path"
            name: name
            required: true
            description: "New name"
            type: "string"
            format: "string"
          - in: "path"
            name: type
            required: true
            description: "New type"
            type: "string"
            format: "string"
          - in: "path"
            name: postcode
            required: true
            description: "New postcode"
            type: "string"
            format: "string"
          - in: "path"
            name: town
            required: true
            description: "New town"
            type: "string"
            format: "string"
          - in: "path"
            name: online
            required: true
            description: "Shop online presence"
            type: "boolean"
            format: "boolean"
          - in: "path"
            name: scale
            required: true
            description: "Size of shop"
            type: "string"
            format: "string"
        responses:
          200:
            description: "Successful"
            schema: 
              $ref: "#/definitions/shops"
          404:
            description: "Shop not found"
            schema:   
              $ref: "#/definitions/shops"
          400:
            description: "Unable to create shop"
            schema: 
              $ref: "#/definitions/shops"
            
            
      delete:
        tags: 
        - "Shop"
        summary: "Deletes a shop"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: shopId
          required: true
          description: "Shop id to delete"
          type: "integer"
          format: "int64"
        responses:
          200: 
            description: "Deleted"
            schema:   
              $ref: "#/definitions/shops"
          404:
            description: "Shop not found"
            schema:   
              $ref: "#/definitions/shops"
          400:
            description: "Unable to delete Shop"
            schema:   
              $ref: "#/definitions/shops"
      get: 
        tags: 
        - "Shop"
        summary: "Get one shop" 
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: shopId
          required: true
          description: "Shop id to return"
          type: "integer"
          format: "int64"
        responses:
          200:
            description: "Successful"
            schema: 
              $ref: "#/definitions/shops"
          404:
            description: "Shop not found"
            schema:   
              $ref: "#/definitions/shops"

  /shops/{shopId}/employees:
      get: 
        tags: 
        - "Shop"
        summary: "Get all employees from one shop" 
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: shopId
          required: true
          description: "Shop id to return employees"
          type: "integer"
          format: "int64"
        responses:
          200:
            description: "Successful"
            schema: 
              $ref: '#/definitions/employees'
          404:
            description: "Shop not found"
            schema:   
              $ref: '#/definitions/employees'
              
      post: 
        tags: 
        - "Shop"
        summary: "Create employee"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: shopId
          required: true
          description: "Shop id to return shop"
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Employee object that needs to be added to the shop found"
          required: true
          schema:
            $ref: '#/definitions/employees'
        responses:
          200:
            description: "Successful"
            schema: 
              $ref: '#/definitions/employees'
          404:
            description: "Shop not found"
            schema:   
              $ref: "#/definitions/shops"
          400:
            description: "Unable to create shop"
            schema: 
              $ref: '#/definitions/employees'
    
  /shops/{shopId}/employees/{employeeId}:
      delete:
        tags: 
        - "Shop"
        summary: "Deletes a shop"
        produces:
        - "application/json"
        parameters:
        - in: "path"
          name: shopId
          required: true
          description: "Shop id"
          type: "integer"
          format: "int64"
        - in: "path"
          name: employeeId
          required: true
          description: "Employee id to delete"
          type: "integer"
          format: "int64"
        responses:
          200: 
            description: "Deleted"
            schema:   
              $ref: "#/definitions/shops"
          404:
            description: "Shop or Employee not found"
            schema:   
              $ref: "#/definitions/shops"
          400:
            description: "Unable to delete employee"
            schema:   
              $ref: "#/definitions/shops"
              
              
              
definitions:
  shops: 
    type: "object"
    properties: 
      shopId: 
        type: "integer"
        format: "int64"
      name: 
        type: "string"
        example: "Zara"
      type: 
        type: "string"
        example: "clothing"
      location: 
        type: "object"
        properties:
          postcode: 
            type: "string"
            example: "SP10 1DE"
          town: 
            type: "string"
            example: "Andover"
          online:
            type: "boolean"
            example: "true"
      scale: 
        type: "string"
        enum:
          - small
          - medium
          - large
          - massive 
  /{shopId}: 
    type: "object"
    properties: 
      id: 
        type: "integer"
        format: "int64"
  employees: 
    type: "object"
    properties: 
      employeeId: 
        type: "integer"
        format: "int64"
      name: 
        type: "object"
        properties:
          firstName: 
            type: "string"
            example: "Evie"
          lastName: 
            type: "string"
            example: "Butland"
      shop: 
        type: "string"
        example: "Apple"
      contactDetails: 
        type: "object"
        properties:
          telephone: 
            type: "string"
            example: "01234567891"
          email: 
            type: "string"
            example: "email@email.com"
          postcode:
            type: "string"
            example: "SP10 1DE"
      gender: 
        type: "string"
        enum:
          - male
          - female
          - other
      age: 
        type: "number"
        example: 20
      emergancyContact: 
        type: "object"
        properties:
          name: 
            type: "string"
            example: "Clare Butland"
          relation: 
            type: "string"
            enum:
              - parent
              - sibling
              - guardian
              - friend
              - collegue
    
  /{employeeId}:
    type: "object"
    properties: 
      id: 
        type: "integer"
        format: "int64"
      